from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class OpenC2CommandHeaders(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id=None, created=None, _from=None, to=None):  # noqa: E501
        """OpenC2CommandHeaders - a model defined in OpenAPI

        :param request_id: The request_id of this OpenC2CommandHeaders.  # noqa: E501
        :type request_id: str
        :param created: The created of this OpenC2CommandHeaders.  # noqa: E501
        :type created: int
        :param _from: The _from of this OpenC2CommandHeaders.  # noqa: E501
        :type _from: str
        :param to: The to of this OpenC2CommandHeaders.  # noqa: E501
        :type to: str
        """
        self.openapi_types = {
            'request_id': str,
            'created': int,
            '_from': str,
            'to': str
        }

        self.attribute_map = {
            'request_id': 'request_id',
            'created': 'created',
            '_from': 'from',
            'to': 'to'
        }

        self._request_id = request_id
        self._created = created
        self.__from = _from
        self._to = to

    @classmethod
    def from_dict(cls, dikt) -> 'OpenC2CommandHeaders':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OpenC2CommandHeaders of this OpenC2CommandHeaders.  # noqa: E501
        :rtype: OpenC2CommandHeaders
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self) -> str:
        """Gets the request_id of this OpenC2CommandHeaders.

        ID of a OpenC2 Command Request  # noqa: E501

        :return: The request_id of this OpenC2CommandHeaders.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id: str):
        """Sets the request_id of this OpenC2CommandHeaders.

        ID of a OpenC2 Command Request  # noqa: E501

        :param request_id: The request_id of this OpenC2CommandHeaders.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def created(self) -> int:
        """Gets the created of this OpenC2CommandHeaders.

        OpenC2 Command creation Timestamp  # noqa: E501

        :return: The created of this OpenC2CommandHeaders.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created: int):
        """Sets the created of this OpenC2CommandHeaders.

        OpenC2 Command creation Timestamp  # noqa: E501

        :param created: The created of this OpenC2CommandHeaders.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def _from(self) -> str:
        """Gets the _from of this OpenC2CommandHeaders.

        Hostname or IP of OpenC2 sender  # noqa: E501

        :return: The _from of this OpenC2CommandHeaders.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this OpenC2CommandHeaders.

        Hostname or IP of OpenC2 sender  # noqa: E501

        :param _from: The _from of this OpenC2CommandHeaders.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this OpenC2CommandHeaders.

        Hostname or IP of OpenC2 receiver  # noqa: E501

        :return: The to of this OpenC2CommandHeaders.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this OpenC2CommandHeaders.

        Hostname or IP of OpenC2 receiver  # noqa: E501

        :param to: The to of this OpenC2CommandHeaders.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to
