#+TITLE: Mitigation Manager

This project contains all the necessary resources to build and deploy the
Mitigation Manager on the ResilMesh network.

# TODO An idea I had is that we could build out our own attack graphs based on
# the network events.  I don't know how much "attack mitigation" this is as
# opposed to detection/forensics/etc, but it's definitely related to choosing
# the appropriate mitigations.  I also don't know how useful this'd be, or how
# feasible (since I don't really have a good idea of what the alert traffic is
# going to look like), but it's an interesting approach.  For example: say that
# X attack happens, then Y, and that's followed by Z.  Perhaps X-Y-Z doesn't
# match any of our predefined attack graphs, but we can store this "mini attack
# graph" and use it in the future when we detect X-Y to prevent Z in advance.

# TODO There's something to be said about MITRE tactics.  When receiving alerts
# with MITRE ATT&CK IDs associated with them, we use them to update the current
# state and build attack graphs.  However, other than by checking against
# preexisting hand crafted (AI generated?) graphs, there's no real way to tell
# if MITRE ID A happened because of MITRE ID B, and is thus the next node in a
# graph.  Tactics are already associated to attacks, and can be used to predict
# what will happen next.  For example, file permission modification is
# associated with defense evation.  Tactics are few, so we could reasonably
# build manual tactic graphs that represent the ordered steps attackers will
# take.  For example: once an attacker has gained initial access (TA0001), they
# will almost certainly never do that again, and so any additional alerts
# corresponding to initial access will most likely come from other attacks and
# thus require separate attack graphs to be built.

* Deployment

The Mitigation Manager is packaged inside a Docker image and deployed using
Docker Compose.

** Creating the ResilMesh network

All ResilMesh containers run on a special network called =resilmesh_network=.
This network should be created in advance with the following command:

#+NAME: mitigation-manager-create-network
#+begin_src sh
  docker network create resilmesh_network
#+end_src

** Setting environment variables

The project includes an =.env.example= file with information regarding the
available environment variables.  Make a copy of the file, rename it to =.env=,
and fill/modify any necessary values.

** Launching the Mitigation Manager

#+NAME: mitigation-manager-run
#+begin_src sh
  docker compose --env-file .env up --build -d
#+end_src

#+NAME: mitigation-manager-stop
#+begin_src sh
  docker compose --env-file .env down --remove-orphans
#+end_src

* Default configuration

The Mitigation Manager is, by default, configured to detect and respond to the
following events:

- Remote connection using ~ncat~.
- Execution permissions added to Python files.
- Ransomware signature detected in a downloaded file.

More specifically, the Mitigation Manager's default configuration includes a
simple attack flow that assumes an attacker performing the aforementioned steps
in sequence.

Detection of these events requires the Mitigation Manager to understand the
format of their corresponding alerts received through NATS.  The default
configuration assumes the alerts follow a format similar to Wazuh rules with the
following special fields:

** Remote connection alert

#+NAME: example-rule-100002
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:31:15.007+0000",
    "rule": {
      "level": 14,
      "description": "Connection via ncat from source port 11234 to 192.168.200.1:36210. PID: 3613",
      "id": "100002",
      "mitre": {
        "id": [
          "T1041",
          "T1219"
        ],
        "tactic": [
          "Exfiltration",
          "Command and Control"
        ],
        "technique": [
          "Exfiltration Over C2 Channel",
          "Remote Access Software"
        ]
      },
      "firedtimes": 1,
      "mail": true,
      "groups": [
        "established_conn"
      ]
    },
    "agent": {
      "id": "001",
      "name": "eeb0036baf28",
      "ip": "192.168.200.200"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "id": "1729589475.25117",
    "full_log": "ncat 3613 848a20e98d52:11234->192.168.200.1:36210",
    "decoder": {
      "name": "lsof_ncat_decoder"
    },
    "data": {
      "pid": "3613",
      "src_port": "11234",
      "dst_ip": "192.168.200.1",
      "dst_port": "36210"
    },
    "location": "command_ncat_conn"
  }
#+end_src

** Execute permissions alert

#+NAME: example-rule-100003
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:18:46.153+0000",
    "rule": {
      "level": 8,
      "description": "Execute permission added to python script.",
      "id": "100003",
      "mitre": {
        "id": [
          "T1222.002"
        ],
        "tactic": [
          "Defense Evasion"
        ],
        "technique": [
          "Linux and Mac File and Directory Permissions Modification"
        ]
      },
      "firedtimes": 4,
      "mail": false,
      "groups": [
        "syscheck"
      ]
    },
    "agent": {
      "id": "001",
      "name": "eeb0036baf28",
      "ip": "192.168.200.200"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "id": "1729588726.22091",
    "full_log": "File '/tmp/zerologon_tester.py' modified\nMode: realtime\nChanged attributes: permission\nPermissions changed from 'rw-r--r--' to 'rwxr-xr-x'\n",
    "syscheck": {
      "path": "/tmp/zerologon_tester.py",
      "mode": "realtime",
      "size_after": "3041",
      "perm_before": "rw-r--r--",
      "perm_after": "rwxr-xr-x",
      "uid_after": "0",
      "gid_after": "0",
      "md5_after": "0008432c27c43f9fe58e9bf191f9c6cf",
      "sha1_after": "84dc56d99268f70619532536f8445f56609547c7",
      "sha256_after": "b8ae48c2e46c28f1004e006348af557c7d912036b9ead88be67bca2bafde01d3",
      "uname_after": "root",
      "gname_after": "root",
      "mtime_after": "2024-10-22T09:16:02",
      "inode_after": 151477998,
      "changed_attributes": [
        "permission"
      ],
      "event": "modified"
    },
    "decoder": {
      "name": "syscheck_integrity_changed"
    },
    "location": "syscheck"
  }
#+end_src

** File added alert

#+NAME: example-rule-100004
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:25:39.991+0000",
    "rule": {
      "level": 8,
      "description": "Executable file added to filesystem",
      "id": "100004",
      "mitre": {
        "id": [
          "T1204.002"
        ],
        "tactic": [
          "Execution"
        ],
        "technique": [
          "Malicious File"
        ]
      },
      "firedtimes": 8,
      "mail": false,
      "groups": [
        "filesystem"
      ]
    },
    "agent": {
      "id": "001",
      "name": "eeb0036baf28",
      "ip": "192.168.200.200"
    },
    "manager": {
      "name": "wazuh.manager"
    },
    "id": "1729589139.24598",
    "full_log": "File '/tmp/zerologon_tester.py' added\nMode: realtime\n",
    "syscheck": {
      "path": "/tmp/zerologon_tester.py",
      "mode": "realtime",
      "size_after": "3041",
      "perm_after": "rw-r--r--",
      "uid_after": "0",
      "gid_after": "0",
      "md5_after": "0008432c27c43f9fe58e9bf191f9c6cf",
      "sha1_after": "84dc56d99268f70619532536f8445f56609547c7",
      "sha256_after": "b8ae48c2e46c28f1004e006348af557c7d912036b9ead88be67bca2bafde01d3",
      "uname_after": "root",
      "gname_after": "root",
      "mtime_after": "2024-10-22T09:25:39",
      "inode_after": 151477998,
      "event": "added"
    },
    "decoder": {
      "name": "syscheck_new_entry"
    },
    "location": "syscheck"
  }
#+end_src

* COMMENT Babel

** Variables

#+NAME: mitigation-manager-port
: 8333

#+NAME: example-dummy-alert
#+begin_src json-ts
  {
    "timestamp": "2024-10-22T09:31:15.007+0000",
    "rule": {
      "#condition": true
    }
  }
#+end_src

#+NAME: example-condition
#+begin_src json-ts
  {
    "identifier": "999",
    "name": "Example name",
    "description": "Example description",
    "params": {
      "a": true
    },
    "args": {
      "b": "alert.b"
    },
    "query": "MATCH (i:IP) RETURN i LIMIT 50",
    "check": "(true)"
  }
#+end_src

#+NAME: example-workflow
#+begin_src json-ts
  {
    "identifier": "999",
    "name": "delete_file",
    "description": "Deletes a file from a machine.",
    "url": "http://localhost/asdasdsadsadsadsad",
    "effective_attacks": [
      "T0001"
    ],
    "cost": 10,
    "params": {
      "a": true
    },
    "args": {
      "b": "alert.b"
    }
  }
#+end_src

** Code blocks

#+NAME: docker-compose-run
#+begin_src sh :var file="docker-compose.yaml" :results verbatim
  docker compose -f $file up -d 2>&1p
#+end_src

#+NAME: docker-compose-kill
#+begin_src sh :var file="docker-compose.yaml" :results verbatim
  docker compose -f $file down --remove-orphans 2>&1
#+end_src

#+NAME: mitigation-manager-get-condition
#+begin_src verb :wrap src ob-verb-response
  GET http://localhost:{{(org-sbe mitigation-manager-port)}}/api/condition?id={{(org-sbe example-condition-id)}}
#+end_src

#+NAME: mitigation-manager-store-condition
#+begin_src verb :wrap src ob-verb-response
  POST http://localhost:{{(org-sbe mitigation-manager-port)}}/api/condition
  Content-Type: application/json

  {{(org-sbe example-condition)}}
#+end_src

#+NAME: mitigation-manager-get-workflow
#+begin_src verb :wrap src ob-verb-response
  GET http://localhost:{{(org-sbe mitigation-manager-port)}}/api/workflow?id={{(org-sbe example-workflow-id)}}
#+end_src

#+NAME: mitigation-manager-store-workflow
#+begin_src verb :wrap src ob-verb-response
  POST http://localhost:{{(org-sbe mitigation-manager-port)}}/api/workflow
  Content-Type: application/json

  {{(org-sbe example-workflow)}}
#+end_src

#+NAME: mitigation-manager-get-version
#+begin_src verb :wrap src ob-verb-response
  GET http://localhost:{{(org-sbe mitigation-manager-port)}}/api/version
#+end_src

#+NAME: mitigation-manager-handle-ncat-connection
#+begin_src verb :wrap src ob-verb-response
  POST http://localhost:{{(org-sbe mitigation-manager-port)}}/api/alert
  Content-Type: application/json

  {{(org-sbe example-rule-100002)}}
#+end_src

#+NAME: mitigation-manager-handle-execution-permissions-added
#+begin_src verb :wrap src ob-verb-response
  POST http://localhost:{{(org-sbe mitigation-manager-port)}}/api/alert
  Content-Type: application/json

  {{(org-sbe example-rule-100003)}}
#+end_src

#+NAME: mitigation-manager-handle-executable-added
#+begin_src verb :wrap src ob-verb-response
  POST http://localhost:{{(org-sbe mitigation-manager-port)}}/api/alert
  Content-Type: application/json

  {{(org-sbe example-rule-100004)}}
#+end_src
