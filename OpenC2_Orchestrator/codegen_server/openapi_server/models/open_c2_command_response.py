from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class OpenC2CommandResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, status_text=None, results=None):  # noqa: E501
        """OpenC2CommandResponse - a model defined in OpenAPI

        :param status: The status of this OpenC2CommandResponse.  # noqa: E501
        :type status: int
        :param status_text: The status_text of this OpenC2CommandResponse.  # noqa: E501
        :type status_text: str
        :param results: The results of this OpenC2CommandResponse.  # noqa: E501
        :type results: str
        """
        self.openapi_types = {
            'status': int,
            'status_text': str,
            'results': str
        }

        self.attribute_map = {
            'status': 'status',
            'status_text': 'status_text',
            'results': 'results'
        }

        self._status = status
        self._status_text = status_text
        self._results = results

    @classmethod
    def from_dict(cls, dikt) -> 'OpenC2CommandResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OpenC2CommandResponse of this OpenC2CommandResponse.  # noqa: E501
        :rtype: OpenC2CommandResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> int:
        """Gets the status of this OpenC2CommandResponse.

        Status code of OpenC2 command execution  # noqa: E501

        :return: The status of this OpenC2CommandResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this OpenC2CommandResponse.

        Status code of OpenC2 command execution  # noqa: E501

        :param status: The status of this OpenC2CommandResponse.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_text(self) -> str:
        """Gets the status_text of this OpenC2CommandResponse.

        Status text of OpenC2 command execution  # noqa: E501

        :return: The status_text of this OpenC2CommandResponse.
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text: str):
        """Sets the status_text of this OpenC2CommandResponse.

        Status text of OpenC2 command execution  # noqa: E501

        :param status_text: The status_text of this OpenC2CommandResponse.
        :type status_text: str
        """
        if status_text is None:
            raise ValueError("Invalid value for `status_text`, must not be `None`")  # noqa: E501

        self._status_text = status_text

    @property
    def results(self) -> str:
        """Gets the results of this OpenC2CommandResponse.

        Results of command execution  # noqa: E501

        :return: The results of this OpenC2CommandResponse.
        :rtype: str
        """
        return self._results

    @results.setter
    def results(self, results: str):
        """Sets the results of this OpenC2CommandResponse.

        Results of command execution  # noqa: E501

        :param results: The results of this OpenC2CommandResponse.
        :type results: str
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results
