from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CloseConnInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actuator_ip=None, pid=None, dst_ip=None, src_port=None, dst_port=None):  # noqa: E501
        """CloseConnInfo - a model defined in OpenAPI

        :param actuator_ip: The actuator_ip of this CloseConnInfo.  # noqa: E501
        :type actuator_ip: str
        :param pid: The pid of this CloseConnInfo.  # noqa: E501
        :type pid: int
        :param dst_ip: The dst_ip of this CloseConnInfo.  # noqa: E501
        :type dst_ip: str
        :param src_port: The src_port of this CloseConnInfo.  # noqa: E501
        :type src_port: int
        :param dst_port: The dst_port of this CloseConnInfo.  # noqa: E501
        :type dst_port: int
        """
        self.openapi_types = {
            'actuator_ip': str,
            'pid': int,
            'dst_ip': str,
            'src_port': int,
            'dst_port': int
        }

        self.attribute_map = {
            'actuator_ip': 'actuator_ip',
            'pid': 'pid',
            'dst_ip': 'dst_ip',
            'src_port': 'src_port',
            'dst_port': 'dst_port'
        }

        self._actuator_ip = actuator_ip
        self._pid = pid
        self._dst_ip = dst_ip
        self._src_port = src_port
        self._dst_port = dst_port

    @classmethod
    def from_dict(cls, dikt) -> 'CloseConnInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CloseConnInfo of this CloseConnInfo.  # noqa: E501
        :rtype: CloseConnInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actuator_ip(self) -> str:
        """Gets the actuator_ip of this CloseConnInfo.

        IP of OpenC2 Actuator/Consumer of command  # noqa: E501

        :return: The actuator_ip of this CloseConnInfo.
        :rtype: str
        """
        return self._actuator_ip

    @actuator_ip.setter
    def actuator_ip(self, actuator_ip: str):
        """Sets the actuator_ip of this CloseConnInfo.

        IP of OpenC2 Actuator/Consumer of command  # noqa: E501

        :param actuator_ip: The actuator_ip of this CloseConnInfo.
        :type actuator_ip: str
        """
        if actuator_ip is None:
            raise ValueError("Invalid value for `actuator_ip`, must not be `None`")  # noqa: E501

        self._actuator_ip = actuator_ip

    @property
    def pid(self) -> int:
        """Gets the pid of this CloseConnInfo.

        PID of established connection process  # noqa: E501

        :return: The pid of this CloseConnInfo.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid: int):
        """Sets the pid of this CloseConnInfo.

        PID of established connection process  # noqa: E501

        :param pid: The pid of this CloseConnInfo.
        :type pid: int
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")  # noqa: E501

        self._pid = pid

    @property
    def dst_ip(self) -> str:
        """Gets the dst_ip of this CloseConnInfo.

        Dest IP of established connection  # noqa: E501

        :return: The dst_ip of this CloseConnInfo.
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip: str):
        """Sets the dst_ip of this CloseConnInfo.

        Dest IP of established connection  # noqa: E501

        :param dst_ip: The dst_ip of this CloseConnInfo.
        :type dst_ip: str
        """
        if dst_ip is None:
            raise ValueError("Invalid value for `dst_ip`, must not be `None`")  # noqa: E501

        self._dst_ip = dst_ip

    @property
    def src_port(self) -> int:
        """Gets the src_port of this CloseConnInfo.

        Source port of established connection  # noqa: E501

        :return: The src_port of this CloseConnInfo.
        :rtype: int
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port: int):
        """Sets the src_port of this CloseConnInfo.

        Source port of established connection  # noqa: E501

        :param src_port: The src_port of this CloseConnInfo.
        :type src_port: int
        """
        if src_port is None:
            raise ValueError("Invalid value for `src_port`, must not be `None`")  # noqa: E501

        self._src_port = src_port

    @property
    def dst_port(self) -> int:
        """Gets the dst_port of this CloseConnInfo.

        Dest port of established connection  # noqa: E501

        :return: The dst_port of this CloseConnInfo.
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port: int):
        """Sets the dst_port of this CloseConnInfo.

        Dest port of established connection  # noqa: E501

        :param dst_port: The dst_port of this CloseConnInfo.
        :type dst_port: int
        """
        if dst_port is None:
            raise ValueError("Invalid value for `dst_port`, must not be `None`")  # noqa: E501

        self._dst_port = dst_port
